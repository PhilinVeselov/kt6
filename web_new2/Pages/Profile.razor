@page "/profile"
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@using Newtonsoft.Json
@using System.Net.Http.Headers
@using System.Threading.Tasks

<h3>Мой профиль</h3>

@if (UserProfile == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form @onsubmit="SaveChanges">
        <div class="form-group">
            <label for="firstName">Имя</label>
            <input type="text" class="form-control" id="firstName" @bind="UserProfile.FirstName">
        </div>
        <div class="form-group">
            <label for="lastName">Фамилия</label>
            <input type="text" class="form-control" id="lastName" @bind="UserProfile.LastName">
        </div>
        <div class="form-group">
            <label for="email">Email</label>
            <input type="email" class="form-control" id="email" @bind="UserProfile.Email">
        </div>
        <div class="form-group">
            <label for="password">Пароль</label>
            <input type="password" class="form-control" id="password" @bind="UserProfile.Password">
        </div>
        <button type="button" class="btn btn-primary" @onclick="SaveChanges">Сохранить изменения</button>
    </form>
}

@code {
    private UserProfileModel UserProfile;
    public class UserProfileModel
    {
        public int UserId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public string Status { get; set; } // Добавляем поле статуса

    }

    public class ApiResponse
    {
        public string Status { get; set; }
        public object User { get; set; } // Замените тип object на тип вашей UserProfileModel, если вы уверены, что ответ будет содержать конкретный тип
        public string Message { get; set; }
    }

    private async Task LoadProfile()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await HttpClient.GetAsync("https://localhost:7129/auth/my_profile");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var responseObject = JsonConvert.DeserializeObject<ApiResponse>(content);

                if (responseObject.Status == "success")
                {
                    UserProfile = JsonConvert.DeserializeObject<UserProfileModel>(responseObject.User.ToString());
                }
                else
                {
                    Console.WriteLine("Ошибка загрузки профиля: " + responseObject.Message);
                }
            }
            else
            {
                Console.WriteLine("Ошибка загрузки профиля");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading profile: " + ex.Message);
        }
    }

    private async Task SaveChanges()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            // Включаем статус и пароль в JSON объект
            UserProfile.Status = ""; // Здесь вы можете установить текущий статус профиля
            UserProfile.Password = ""; // Пароль оставляем пустым, если он не меняется

            var json = JsonConvert.SerializeObject(UserProfile);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            var response = await HttpClient.PutAsync("https://localhost:7129/auth/edit_profile", content);

            if (response.IsSuccessStatusCode)
            {
                // Обновляем данные профиля с новыми данными
                var updatedProfileContent = await response.Content.ReadAsStringAsync();
                var updatedProfile = JsonConvert.DeserializeObject<UserProfileModel>(updatedProfileContent);
                UserProfile = updatedProfile; // Обновляем UserProfile данными из ответа
                Console.WriteLine("Изменения сохранены успешно");
            }
            else
            {
                Console.WriteLine("Ошибка сохранения изменений");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error saving changes: " + ex.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
    }
}
