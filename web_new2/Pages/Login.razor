@page "/login"
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System.IdentityModel.Tokens.Jwt
@using System.Net.Http.Json
@using System.Text.Json;

<h1>Вход</h1>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">Вход</div>
                <div class="card-body">
                    <button class="btn btn-primary mb-3" @onclick="ShowLoginForm">Войти</button>
                    <button class="btn btn-secondary" @onclick="ShowRegisterForm">Зарегистрироваться</button>
                    <form @onsubmit="LoginUser" style="@LoginFormDisplayStyle">
                        <div class="form-group">
                            <label for="loginEmail">Email</label>
                            <input type="email" id="loginEmail" class="form-control" @bind="LoginModel.Email" required>
                        </div>
                        <div class="form-group">
                            <label for="loginPassword">Пароль</label>
                            <input type="password" id="loginPassword" class="form-control" @bind="LoginModel.Password" required>
                        </div>
                        <button type="submit" class="btn btn-primary">Войти</button>
                    </form>
                    <form @onsubmit="RegisterUser" style="@RegisterFormDisplayStyle">
                        <div class="form-group">
                            <label for="registerFirstName">Имя</label>
                            <input type="text" id="registerFirstName" class="form-control" @bind="RegisterModel.FirstName" required>
                        </div>
                        <div class="form-group">
                            <label for="registerLastName">Фамилия</label>
                            <input type="text" id="registerLastName" class="form-control" @bind="RegisterModel.LastName" required>
                        </div>
                        <div class="form-group">
                            <label for="registerEmail">Email</label>
                            <input type="email" id="registerEmail" class="form-control" @bind="RegisterModel.Email" required>
                        </div>
                        <div class="form-group">
                            <label for="registerPassword">Пароль</label>
                            <input type="password" id="registerPassword" class="form-control" @bind="RegisterModel.Password" required>
                        </div>
                        <!-- Hidden field for status -->
                        <input type="hidden" id="registerStatus" value="Пользователь">
                        <button type="submit" class="btn btn-primary">Зарегистрироваться</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool ShowLogin = true;
    private bool ShowRegister = false;

    private LoginFormModel LoginModel { get; set; } = new LoginFormModel();
    private RegisterFormModel RegisterModel { get; set; } = new RegisterFormModel();

    private string LoginFormDisplayStyle => ShowLogin ? "display: block;" : "display: none;";
    private string RegisterFormDisplayStyle => ShowRegister ? "display: block;" : "display: none;";

    private class LoginFormModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private class RegisterFormModel
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public string Status { get; set; } = "Пользователь"; // Установите значение "Пользователь" по умолчанию
    }

    public class TokenResponse
    {
        public string Token { get; set; }
    }

    private async Task ShowLoginForm()
    {
        ShowLogin = true;
        ShowRegister = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ShowRegisterForm()
    {
        ShowLogin = false;
        ShowRegister = true;
        await InvokeAsync(StateHasChanged);
    }

    private int UserIdFromToken;

    private async Task LoginUser()
    {
        var response = await HttpClient.PostAsJsonAsync("https://localhost:7129/auth/login", LoginModel);

        if (response.IsSuccessStatusCode)
        {
            try
            {
                // Read the response content as a string
                var tokenResponseString = await response.Content.ReadAsStringAsync();

                // Deserialize the JSON response into an object
                var tokenResponse = JsonSerializer.Deserialize<Dictionary<string, string>>(tokenResponseString);

                // Check if the response contains the access_token field
                if (tokenResponse.TryGetValue("access_token", out string accessToken) && !string.IsNullOrEmpty(accessToken))
                {
                    // Save the token to local storage
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "token", accessToken);

                    // Optionally, extract and save the user role if needed
                    // var role = ExtractRoleFromToken(accessToken);
                    // await JSRuntime.InvokeVoidAsync("localStorage.setItem", "role", role);

                    // Reload the page to apply changes (optional)
                    NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
                }
                else
                {
                    Console.WriteLine("Error: Access token not found in the response.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error handling response: " + ex.Message);
            }
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Login error: " + error);
        }
    }



    private async Task RegisterUser()
    {
        // Установите значение "Пользователь" для статуса перед отправкой данных на сервер
        RegisterModel.Status = "Пользователь";

        var response = await HttpClient.PostAsJsonAsync("https://localhost:7129/auth/register", RegisterModel);
        if (response.IsSuccessStatusCode)
        {
            // Регистрация успешна
            var successMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Регистрация успешна: " + successMessage);
            // Здесь можно добавить логику обработки успешной регистрации, например, отображение сообщения пользователю
        }
        else
        {
            // Ошибка регистрации
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Ошибка регистрации: " + error);
            // Здесь можно добавить логику обработки ошибки, например, отображение сообщения пользователю
        }
    }



    private string ExtractRoleFromToken(string token)
    {
        JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);

        // Получаем все claims из токена
        var claims = jwtToken.Claims;

        // Находим claim с типом "role" и возвращаем его значение
        var roleClaim = claims.FirstOrDefault(c => c.Type == "role");
        return roleClaim?.Value;
    }
}
